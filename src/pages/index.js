import Head from "next/head";
import {
  Button,
  Container,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Spinner,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  VStack,
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { useToast } from "@chakra-ui/react";
import {
  useFetchProducts,
  useCreateProduct,
  useUpdateProduct,
  useDeleteProduct,
} from "@/feature/product";

export default function Home() {
  const toast = useToast();
  const {
    data,
    isLoading: productLoading,
    refetch: refetchProducts,
  } = useFetchProducts({
    onError: () => {
      toast({ title: "failed to load data", status: "error" });
    },
  });

  // const { data, isLoading } = useQuery({
  //   queryFn: async () => {
  //     const product = await axiosInstance.get("/products");
  //     return product;
  //   },
  //   // queryKey,
  // });

  // console.log(productQuery.data);

  const formik = useFormik({
    initialValues: {
      name: "",
      price: "",
      description: "",
      image: "",
      id: "",
    },
    onSubmit: () => {
      console.log(formik.values);
      const { name, price, description, image, id } = formik.values;

      if (id) {
        console.log(id);
        updateProduct({
          name,
          price: parseInt(price),
          description,
          image,
          id,
        });
        toast({
          title: "Product updated successfully",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
      } else {
        createProduct({
          name,
          price: parseInt(price),
          description,
          image,
        });

        toast({
          title: "Product added successfully",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
      }

      formik.setFieldValue("name", "");
      formik.setFieldValue("price", 0);
      formik.setFieldValue("description", "");
      formik.setFieldValue("image", "");
      formik.setFieldValue("id", "");
    },
  });

  const { mutate: createProduct, isLoading: addProductLoading } =
    useCreateProduct({
      onSuccess: () => {
        refetchProducts();
      },
    });

  const { mutate: updateProduct, isLoading: updateProductLoading } =
    useUpdateProduct({
      onSuccess: () => {
        refetchProducts();
      },
    });

  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetchProducts();
    },
  });

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  };

  const deleteConfirmation = (productId) => {
    const shoudDelete = confirm("Are you sure you want to delete");

    if (shoudDelete) {
      deleteProduct(productId);
    }
  };

  const onEditClick = (product) => {
    formik.setFieldValue("id", product.id);
    formik.setFieldValue("name", product.name);
    formik.setFieldValue("price", product.price);
    formik.setFieldValue("description", product.description);
    formik.setFieldValue("image", product.image);
  };

  const renderProducts = () => {
    return data?.data.map((product) => {
      return (
        <Tr key={product.id}>
          <Td>{product.id}</Td>
          <Td>{product.name}</Td>
          <Td>{product.price}</Td>
          <Td>{product.description}</Td>
          <Td>{product.image}</Td>
          <Td>
            <Button
              onClick={() => onEditClick(product)}
              colorScheme="blue"
              variant="solid"
            >
              Edit
            </Button>
            <Button
              onClick={() => deleteConfirmation(product.id)}
              colorScheme="red"
              variant="solid"
            >
              Delete
            </Button>
          </Td>
        </Tr>
      );
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Heading>Hello World</Heading>
          <Table mb="6">
            <Thead>
              <Tr>
                <Th>Id</Th>
                <Th>Name</Th>
                <Th>Price</Th>
                <Th>Description</Th>
                <Th>Image</Th>
                <Th colSpan={2}>Action</Th>
              </Tr>
            </Thead>
            <Tbody>
              {renderProducts()}
              {productLoading ? <Spinner /> : null}
            </Tbody>
          </Table>

          <form onSubmit={formik.handleSubmit}>
            <VStack spacing="3">
              <FormControl>
                <FormLabel>Product ID</FormLabel>
                <Input
                  name="id"
                  value={formik.values.id}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Product Name</FormLabel>
                <Input
                  name="name"
                  value={formik.values.name}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <Input
                  name="price"
                  value={formik.values.price}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input
                  name="description"
                  value={formik.values.description}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Image</FormLabel>
                <Input
                  name="image"
                  value={formik.values.image}
                  onChange={handleFormInput}
                />
              </FormControl>
              {addProductLoading || updateProductLoading ? (
                <Spinner />
              ) : (
                <Button type="submit">Submit</Button>
              )}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
